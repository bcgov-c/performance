# Clean Openshift
# Deletes all resources from OpenShift to prepare for a fresh deployment
name: 🧹️ Clean-up

env:
  USER: ${{ github.actor }}

on:
  workflow_call:
    inputs:
      APP_NAME:
        required: true
        type: string
      APP_HOST_URL:
        required: true
        type: string
      DEPLOY_NAMESPACE:
        required: true
        type: string
      DB_NAME:
        required: true
        type: string
      WEB_NAME:
        required: true
        type: string
      PHP_NAME:
        required: true
        type: string
      CRON_NAME:
        required: true
        type: string
      REDIS_NAME:
        required: true
        type: string
    secrets:
      SA_TOKEN:
        required: true

jobs:
  # Clean Openshift
  # Not configured for prod deployments (to be safe)
  clean:
    name: OpenShift
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }}
    if: |
      always()
      && (
        github.ref_name == 'e66ac2-prod' ||
        github.ref_name  == '332842-dev' ||
        github.ref_name  == '332842-test'
      )
    steps:
      - name: 📤 Checkout Target Branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}

      # Get Environment Variables from file
      - name: 📋 Setup Environment from File
        id: dotenv
        uses: falti/dotenv-action@v1
        with:
          path: .env.example
          export-variables: true
          log-variables: true
          keys-case: upper

      # Log in to OpenShift.
      # Note: The secrets needed to log in are NOT available if the PR comes from a FORK.
      # PR's must originate from a branch off the original repo or else all openshift `oc` commands will fail.
      - name: 🔑 Log in to OpenShift ( ${{ github.ref_name }} )
        run: |
          server=https://api.silver.devops.gov.bc.ca:6443
          oc login --token=${{ secrets.SA_TOKEN }} --server=$server
          oc project ${{ inputs.DEPLOY_NAMESPACE }}

      - name: 🧹️ Clean ${{ inputs.REDIS_NAME }}-redis-cluster
        run: |
          if [[ `oc describe sts ${{ inputs.REDIS_NAME }} 2>&1` =~ "NotFound" ]]; then
            echo "${{ inputs.REDIS_NAME }} NOT FOUND: Skipping..."
          else
            echo "${{ inputs.REDIS_NAME }} FOUND: Cleaning..."
            helm uninstall ${{ inputs.REDIS_NAME }}
          fi
          if [[ `oc describe configmap ${{ inputs.REDIS_NAME }}-redis-cluster-default 2>&1` =~ "NotFound" ]]; then
            echo "${{ inputs.REDIS_NAME }}-redis-cluster-default NOT FOUND: Skipping..."
          else
            oc delete configmap ${{ inputs.REDIS_NAME }}-redis-cluster-default
          fi
          if [[ `oc describe configmap ${{ inputs.REDIS_NAME }}-redis-cluster-scripts 2>&1` =~ "NotFound" ]]; then
            echo "${{ inputs.REDIS_NAME }}-redis-cluster-scripts NOT FOUND: Skipping..."
          else
            oc delete configmap ${{ inputs.REDIS_NAME }}-redis-cluster-scripts
          fi

      - name: 🧹️ Clean ${{ inputs.DB_NAME }}
        run: |
          configmap_name="${{ inputs.DB_NAME }}-config"
          if [[ `oc describe sts ${{ inputs.DB_NAME }} 2>&1` =~ "NotFound" ]]; then
            echo "${{ inputs.DB_NAME }} NOT FOUND: Skipping..."
          else
            echo "${{ inputs.DB_NAME }} FOUND: Cleaning..."
            oc scale sts/${{ inputs.DB_NAME }} --replicas=0
            oc delete sts/${{ inputs.DB_NAME }}
            # for i in 0 1 2; do
            #   if ! [[ `oc describe pvc datadir-${{ inputs.DB_NAME }}-$i 2>&1` =~ "NotFound" ]]; then
            #     kubectl delete pvc datadir-${{ inputs.DB_NAME }}-$i;
            #   else
            #     echo "pvc datadir-${{ inputs.DB_NAME }}-$i NOT FOUND: Skipping..."
            #   fi
            # done
          fi
          if ! [[ `oc describe configmap $configmap_name 2>&1` =~ "NotFound" ]]; then
            oc delete configmap $configmap_name
          fi
          if ! [[ `oc describe service ${{ inputs.DB_NAME }} 2>&1` =~ "NotFound" ]]; then
            oc delete service ${{ inputs.DB_NAME }}
          fi

      - name: 🧹️ Clean ${{ inputs.WEB_NAME }}
        id: clean-web
        run: |
          configmap_name="${{ inputs.WEB_NAME }}-config"
          if [[ `oc describe dc ${{ inputs.WEB_NAME }} 2>&1` =~ "NotFound" ]]; then
            echo "${{ inputs.WEB_NAME }} NOT FOUND: Skipping..."
          else
            echo "${{ inputs.WEB_NAME }} FOUND: Cleaning resources..."
            oc scale deployment/${{ inputs.WEB_NAME }} --replicas=0
            oc delete deployment/${{ inputs.WEB_NAME }}
            echo "DELETED dc ${{ inputs.WEB_NAME }}"
          fi
          if [[ `oc describe configmap $configmap_name 2>&1` =~ "NotFound" ]]; then
            echo "$configmap_name NOT FOUND: Skipping..."
          else
            oc delete configmap $configmap_name
            echo "DELETED configmap $configmap_name"
          fi
          if [[ `oc describe configmap ${{ inputs.APP_NAME }}-env 2>&1` =~ "NotFound" ]]; then
            echo "Configmap ${{ inputs.APP_NAME }}-env NOT FOUND: Skipping..."
          else
            oc delete configmap ${{ inputs.APP_NAME }}-env
            echo "DELETED configmap ${{ inputs.APP_NAME }}-env"
          fi
          if ! [[ `oc describe service ${{ inputs.WEB_NAME }} 2>&1` =~ "NotFound" ]]; then
            oc delete service ${{ inputs.WEB_NAME }}
            echo "DELETED service: ${{ inputs.WEB_NAME }}"
          fi


      - name: 🧹️ Clean ${{ inputs.PHP_NAME }}
        id: clean-php
        run: |
          configmap_name="${{ inputs.PHP_NAME }}-config"
          app_configmap_name="${{ inputs.APP_NAME}}-config"
          if [[ `oc describe dc ${{ inputs.PHP_NAME }} 2>&1` =~ "NotFound" ]]; then
            echo "${{ inputs.PHP_NAME }} NOT FOUND: Skipping..."
          else
            echo "${{ inputs.PHP_NAME }} FOUND: Cleaning resources..."
            oc scale deployment/${{ inputs.PHP_NAME }} --replicas=0
            oc delete deployment/${{ inputs.PHP_NAME }}
            echo "DELETED dc ${{ inputs.PHP_NAME }}"
          fi
          if [[ `oc describe configmap $configmap_name 2>&1` =~ "NotFound" ]]; then
            echo "$configmap_name NOT FOUND: Skipping..."
          else
            oc delete configmap $configmap_name
            echo "DELETED configmap $configmap_name"
          fi
          if [[ `oc describe configmap $app_configmap_name 2>&1` =~ "NotFound" ]]; then
            echo "$app_configmap_name NOT FOUND: Skipping..."
          else
            oc delete configmap $app_configmap_name
            echo "DELETED configmap $app_configmap_name"
          fi
          if ! [[ `oc describe pvc ${{ inputs.APP_NAME }}-env 2>&1` =~ "NotFound" ]]; then
            oc delete pvc ${{ inputs.APP_NAME }}-env
            echo "DELETED pvc ${{ inputs.APP_NAME }}-env"
          fi
          if ! [[ `oc describe service ${{ inputs.PHP_NAME }} 2>&1` =~ "NotFound" ]]; then
            oc delete service ${{ inputs.PHP_NAME }}
            echo "DELETED service: ${{ inputs.PHP_NAME }}"
          fi

      - name: 🧹️ Clean Migrate-Build Job
        id: clean-migrate-build
        run: |
          if [[ `oc describe job migrate-build-files 2>&1` =~ "NotFound" ]]; then
            echo "migrate-build-files NOT FOUND: Skipping..."
          else
            echo "migrate-build-files FOUND: Cleaning resources..."
            oc delete job migrate-build-files
            echo "DELETED job migrate-build-files"
          fi

      - name: 🧹️ Clean Cron
        id: clean-cron-job
        run: |
          if [[ `oc describe deployment cron 2>&1` =~ "NotFound" ]]; then
            echo "cron NOT FOUND: Skipping..."
          else
            echo "cron FOUND: Cleaning resources..."
            oc delete deployment cron
            echo "DELETED deployment: cron"
          fi
          if [[ `oc describe deployment ${{ inputs.CRON_NAME }} 2>&1` =~ "NotFound" ]]; then
            echo "${{ inputs.CRON_NAME }} deployment NOT FOUND: Skipping..."
          else
            echo "${{ inputs.CRON_NAME }} FOUND: Cleaning resources..."
            oc delete dc ${{ inputs.CRON_NAME }}
            echo "DELETED deployment: ${{ inputs.CRON_NAME }}"
          fi
          if [[ `oc describe configmap ${{ inputs.CRON_NAME }}-config 2>&1` =~ "NotFound" ]]; then
            echo "${{ inputs.CRON_NAME }}-config NOT FOUND: Skipping..."
          else
            oc delete configmap ${{ inputs.CRON_NAME }}-config
          fi

      - name: 🧹️ Clean Redis
        id: clean-redis
        run: |
          if [[ `oc describe sts/${{ inputs.REDIS_NAME }} 2>&1` =~ "NotFound" ]]; then
            echo "${{ inputs.REDIS_NAME }} NOT FOUND: Skipping..."
          else
            echo "${{ inputs.REDIS_NAME }} FOUND: Cleaning resources..."
            oc delete sts/${{ inputs.REDIS_NAME }}
            echo "DELETED sts: ${{ inputs.REDIS_NAME }}"
          fi
          if [[ `oc describe sts/${{ inputs.REDIS_NAME }} 2>&1` =~ "NotFound" ]]; then
            echo "${{ inputs.REDIS_NAME }} sts NOT FOUND: Skipping..."
          else
            echo "${{ inputs.REDIS_NAME }} FOUND: Cleaning resources..."
            oc delete sts/${{ inputs.REDIS_NAME }}
            echo "DELETED sts: ${{ inputs.REDIS_NAME }}"
          fi
          if [[ `oc describe configmap ${{ inputs.REDIS_NAME }}-config 2>&1` =~ "NotFound" ]]; then
            echo "${{ inputs.REDIS_NAME }}-config NOT FOUND: Skipping..."
          else
            oc delete configmap ${{ inputs.REDIS_NAME }}-config
          fi

      - name: 🧹️ Clean Upgrade Job
        id: clean-upgrade-job
        run: |
          if [[ `oc describe job ${{ inputs.APP_NAME }}-upgrade 2>&1` =~ "NotFound" ]]; then
            echo "${{ inputs.APP_NAME }}-upgrade NOT FOUND: Skipping..."
          else
            echo "${{ inputs.APP_NAME }}-upgrade FOUND: Cleaning resources..."
            oc delete job ${{ inputs.APP_NAME }}-upgrade
            echo "DELETED job ${{ inputs.APP_NAME }}-upgrade"
          fi

      - name: 🧹️ Clean ${{ inputs.APP_NAME}}-${{ inputs.WEB_NAME }} | ${{ inputs.APP_HOST_URL }}
        id: clean-route
        run: |
          route_name="${{ inputs.APP_NAME}}-${{ inputs.WEB_NAME }}"
          if [[ `oc describe route $route_name 2>&1` =~ "NotFound" ]]; then
            echo "Route NOT FOUND: $route_name - Skipping..."
          else
            echo "$route_name FOUND: Cleaning resources..."
            oc delete route $route_name
            echo "DELETED route:  $route_name"
          fi

      - name: 🧹️ Clean ${{ inputs.APP_NAME}}-secrets
        id: clean-secrets
        run: |
          if [[ `oc describe secret ${{ inputs.APP_NAME}}-secrets 2>&1` =~ "NotFound" ]]; then
            echo "${{ inputs.APP_NAME}} NOT FOUND: Skipping..."
          else
            echo "${{ inputs.APP_NAME}} FOUND: Cleaning resources..."
            oc delete secret ${{ inputs.APP_NAME}}-secrets
            echo "DELETED secret ${{ inputs.APP_NAME}}-secrets"
          fi

      - name: 🧹️ Clean Backups
        id: clean-backups
        run: |
          if [[ `helm status backup 2>&1` =~ "STATUS: deployed" ]] || [[ `helm status backup 2>&1` =~ "Error: release: not found" ]]; then
            echo "backup NOT FOUND: Skipping..."
          else
            echo "backup FOUND: Cleaning resources..."
            helm uninstall backup
            echo "UNINSTALLED backup"
          fi
