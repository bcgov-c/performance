name: 🚀 Deploy to OpenShift

concurrency:
  group: deploy-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  USER: ${{ github.actor }}

  # Skip builds for faster deployments / testing ("YES" or build)
  SKIP_BUILDS: "NO"
  SKIP_DEPLOY: "NO"
  # Clean builds before deployments (delete all resources, other than backups) ("YES" or allow collisions)
  CLEAN_BUILDS: "NO"
  BUILD_ID: ${{ github.event.number }}
  INSPECT_JOB_URL: "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

  BUILD_ICON_URL: https://cdn-icons-png.flaticon.com/128/5110/5110294.png
  SUCCESS_ICON_URL: https://cdn-icons-png.flaticon.com/128/1356/1356479.png
  FAIL_ICON_URL: https://www.flaticon.com/free-icon/rocket_6818114

on:
  schedule:
    - cron: "0 3 * * 6"
  push:
    branches:
      - e66ac2-prod
      # - dev
      # - test
      # - prod
  pull_request:
    branches:
      - e66ac2-prod
      # - dev
      # - test
      # - prod

  workflow_call:
    secrets:
      ARTIFACTORY_PASSWORD:
        required: true
      ARTIFACTORY_USER:
        required: true
      DB_USER:
        required: true
      DB_PASSWORD:
        required: true
      ARTIFACTORY_URL:
        required: true
      ARTIFACTORY_EMAIL:
        required: true
      ROCKETCHAT_WEBHOOK_URL:
        required: true

jobs:
  #Print variables for logging and debugging purposes
  checkEnv:
    name: 📋 Environment Check
    runs-on: ubuntu-latest
    outputs: # Define the output parameter
      APP_NAME: ${{ env.APP_NAME }}
      APP_KEY: ${{ env.APP_KEY }}
      DEPLOY_NAMESPACE: ${{ github.ref_name }}
      IMAGE_REPO_DOMAIN: ${{ env.IMAGE_REPO_DOMAIN }}
      IMAGE_PULL_SECRET_NAME: ${{ env.IMAGE_PULL_SECRET_NAME }}
      IMAGE_REPO_URL: ${{ env.IMAGE_REPO_URL }}
      BUILD_NAMESPACE: ${{ github.ref_name }}
      DB_NAME: ${{ env.DB_NAME }}
      DB_DATABASE: ${{ env.DB_DATABASE }}
      SECRET_DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_HEALTH_QUERY: ${{ env.DB_HEALTH_QUERY }}
      WEB_NAME: ${{ env.WEB_NAME }}
      WEB_IMAGE: ${{ env.WEB_IMAGE }}
      DB_HOST: ${{ env.DB_HOST }}
      DB_PORT: ${{ env.DB_PORT }}
      DB_IMAGE: ${{ env.DB_IMAGE }}
      PHP_NAME: ${{ env.PHP_NAME }}
      CRON_NAME: ${{ env.CRON_NAME }}
      CRON_IMAGE: ${{ env.CRON_IMAGE}}
      REDIS_IMAGE: ${{ env.REDIS_IMAGE }}
      REDIS_NAME: ${{ env.REDIS_NAME }}
      DB_BACKUP_DEPLOYMENT_NAME: ${{ env.DB_BACKUP_DEPLOYMENT_NAME }}
      DB_BACKUP_DEPLOYMENT_FULL_NAME: ${{ env.DB_BACKUP_DEPLOYMENT_FULL_NAME }}
      BACKUP_IMAGE: ${{ env.BACKUP_IMAGE }}
      BACKUP_HELM_CHART: ${{ env.BACKUP_HELM_CHART }}
      CLEAN_BUILDS: ${{ env.CLEAN_BUILDS }}
      SKIP_BUILDS: ${{ env.SKIP_BUILDS }}
      SKIP_DEPLOY: ${{ env.SKIP_DEPLOY }}
    steps:
      - name: 📤 Checkout Target Branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}
          sparse-checkout: |
            openshift/config/mariadb
            example.env
            example.versions.env

      - name: Setup Env Vars
        id: dotenv
        uses: falti/dotenv-action@v1
        with:
          path: example.env
          export-variables: true
          keys-case: upper

      - name: Setup Env Version Vars
        id: dotenv_versions
        uses: falti/dotenv-action@v1
        with:
          path: example.versions.env
          export-variables: true
          keys-case: upper

      - name: Print Env Vars
        run: |
          echo Deploying ${{ env.PROJECT }} > ${{ env.APP_NAME }} on ${{ github.ref_name }}
          echo "-----------------------"
          echo URL: https://${{ env.APP_NAME }}-${{ github.ref_name }}.apps.silver.devops.gov.bc.ca

  # Build Images and deploy to JFrog
  db:
    name: 🔨 DB
    needs: [checkEnv]
    uses: ./.github/workflows/db.yml
    secrets: inherit
    if: needs.checkEnv.outputs.SKIP_BUILDS == 'NO'
    with:
      DB_IMAGE: ${{ needs.checkEnv.outputs.DB_IMAGE }}

  php:
    name: 🔨 PHP
    needs: [checkEnv]
    if: needs.checkEnv.outputs.SKIP_BUILDS == 'NO'
    uses: ./.github/workflows/php.yml
    secrets: inherit

  cron:
    name: 🔨 Cron
    needs: [checkEnv, php]
    if: needs.checkEnv.outputs.SKIP_BUILDS == 'NO'
    uses: ./.github/workflows/cron.yml
    secrets: inherit

  web:
    name: 🔨 Web
    needs: [checkEnv]
    if: needs.checkEnv.outputs.SKIP_BUILDS == 'NO'
    uses: ./.github/workflows/web.yml
    secrets: inherit

  build:
    name: 🔨 App
    needs: [checkEnv, php]
    if: needs.checkEnv.outputs.SKIP_BUILDS == 'NO'
    uses: ./.github/workflows/performance.yml
    secrets: inherit

  call-cleanup-workflow:
    name: 🧹️ Clean-up
    uses: ./.github/workflows/cleanup.yml
    secrets: inherit
    needs: [checkEnv, db, php, cron, build, web]
    # if: success()
    if: needs.checkEnv.outputs.CLEAN_BUILDS == 'YES'
    with:
      APP_NAME: ${{ needs.checkEnv.outputs.APP_NAME }}
      APP_HOST_URL: ${{ needs.checkEnv.outputs.APP_NAME }}-${{ github.ref_name }}.apps.silver.devops.gov.bc.ca
      DEPLOY_NAMESPACE: ${{ needs.checkEnv.outputs.DEPLOY_NAMESPACE }}
      DB_NAME: ${{ needs.checkEnv.outputs.DB_NAME }}
      WEB_NAME: ${{ needs.checkEnv.outputs.WEB_NAME }}
      PHP_NAME: ${{ needs.checkEnv.outputs.PHP_NAME }}
      CRON_NAME: ${{ needs.checkEnv.outputs.CRON_NAME }}
      REDIS_NAME: ${{ needs.checkEnv.outputs.REDIS_NAME }}

  call-deploy-workflow:
    name: 🚀 Deploy
    uses: ./.github/workflows/deploy.yml
    secrets: inherit
    needs: [checkEnv, db, php, cron, build, web]
    if: |
      (always() && needs.checkEnv.outputs.SKIP_DEPLOY == 'NO') &&
      needs.checkEnv.result == 'success' &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled')
    with:
      APP_NAME: ${{ needs.checkEnv.outputs.APP_NAME }}
      WEB_NAME: ${{ needs.checkEnv.outputs.WEB_NAME }}
      WEB_IMAGE: ${{ needs.checkEnv.outputs.WEB_IMAGE }}
      PHP_NAME: ${{ needs.checkEnv.outputs.PHP_NAME }}
      DB_IMAGE: ${{ needs.checkEnv.outputs.DB_IMAGE }}
      DB_HOST: ${{ needs.checkEnv.outputs.DB_HOST }}
      DB_USER: ${{ needs.checkEnv.outputs.DB_USER }}
      DB_PORT: ${{ needs.checkEnv.outputs.DB_PORT }}
      DB_NAME: ${{ needs.checkEnv.outputs.DB_NAME }}
      DB_DATABASE: ${{ needs.checkEnv.outputs.DB_DATABASE }}
      DB_HEALTH_QUERY: ${{ needs.checkEnv.outputs.DB_HEALTH_QUERY }}
      DB_BACKUP_DEPLOYMENT_NAME: ${{ needs.checkEnv.outputs.DB_BACKUP_DEPLOYMENT_NAME }}
      DB_BACKUP_DEPLOYMENT_FULL_NAME: ${{ needs.checkEnv.outputs.DB_BACKUP_DEPLOYMENT_FULL_NAME }}
      BACKUP_IMAGE: ${{ needs.checkEnv.outputs.BACKUP_IMAGE }}
      BACKUP_HELM_CHART: ${{ needs.checkEnv.outputs.BACKUP_HELM_CHART }}
      CRON_IMAGE: ${{ needs.checkEnv.outputs.CRON_IMAGE }}
      CRON_NAME: ${{ needs.checkEnv.outputs.CRON_NAME }}
      REDIS_IMAGE: ${{ needs.checkEnv.outputs.REDIS_IMAGE }}
      REDIS_NAME: ${{ needs.checkEnv.outputs.REDIS_NAME }}
      APP_HOST_URL: ${{ needs.checkEnv.outputs.APP_NAME }}-${{ github.ref_name }}.apps.silver.devops.gov.bc.ca
      BUILD_NAMESPACE: ${{ needs.checkEnv.outputs.BUILD_NAMESPACE }}
      DEPLOY_NAMESPACE: ${{ needs.checkEnv.outputs.DEPLOY_NAMESPACE }}
      IMAGE_REPO_URL: ${{ needs.checkEnv.outputs.IMAGE_REPO_URL }}
      IMAGE_REPO_DOMAIN: ${{ needs.checkEnv.outputs.IMAGE_REPO_DOMAIN }}
      IMAGE_PULL_SECRET_NAME: ${{ needs.checkEnv.outputs.IMAGE_PULL_SECRET_NAME }}

  lighthouse-check:
    name: 🚦 Audit
    runs-on: ubuntu-latest
    needs: [checkEnv, call-deploy-workflow]
    outputs:
      LHRESULT: ${{ steps.lighthouse.outputs.LHRESULT }}
    if: |
      always() &&
      (
        needs.call-deploy-workflow.result == 'success' ||
        needs.checkEnv.outputs.SKIP_DEPLOY == 'YES'
      ) &&
      !contains(needs.*.result, 'failure')
    steps:
      - uses: actions/checkout@v4
      - run: mkdir -p tmp/artifacts
      - name: Install Puppeteer and Lighthouse
        run: npm install puppeteer lighthouse
      - name: Install dependencies
        run: sudo apt-get install -y gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget libgbm-dev
      - name: Setup Chrome
        id: setup-chrome
        uses: browser-actions/setup-chrome@latest
        with:
          install-dependencies: false
      - name: Lighthouse
        id: lighthouse
        run: |
          sleep 120 # Wait for the deployment to be ready
          `echo "LHRESULT=$(node openshift/config/lighthouse/lighthouse-auth.js)" >> $GITHUB_OUTPUT`
        env:
          APP_HOST_URL: ${{ needs.checkEnv.outputs.APP_NAME }}-${{ github.ref_name }}.apps.silver.devops.gov.bc.ca
          TESTER_USERNAME: ${{ secrets.TESTER_USERNAME }}
          TESTER_PASSWORD: ${{ secrets.TESTER_PASSWORD }}
      - name: Archive artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-artifacts
          path: |
            /home/runner/work/performance/performance/*.png
            /home/runner/work/performance/performance/*.md

  notify:
    name: 📫 Notify
    needs:
      [
        checkEnv,
        web,
        build,
        cron,
        php,
        db,
        call-cleanup-workflow,
        call-deploy-workflow,
        lighthouse-check
      ]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download artifacts
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: lighthouse-artifacts
          path: artifacts
      - name: Set Emoji for Notification Status Icon
        id: notification-emoji
        run: |
          if [[ "${{ needs.call-deploy-workflow.result }}" == "success" ]]; then
            `echo "EMOJI=:rocket:" >> $GITHUB_OUTPUT`
          else
            `echo "EMOJI=:boom:" >> $GITHUB_OUTPUT`
          fi
      - name: 📫 Send Notification
        uses: muinmomin/webhook-action@v1.0.0
        env:
          APP_HOST_URL: ${{ needs.checkEnv.outputs.APP_NAME }}-${{ github.ref_name }}.apps.silver.devops.gov.bc.ca
        with:
          url: ${{ secrets.ROCKETCHAT_WEBHOOK_URL }}
          data: >
            {
              "emoji": "${{ steps.notification-emoji.outputs.EMOJI }}",
              "text": "Deployment to: ${{ github.ref_name }}, status: ${{ needs.call-deploy-workflow.result }}",
              "attachments": [{
                "title": "View Job on GitHub",
                "title_link": "${{ env.INSPECT_JOB_URL }}",
                "fields": [{
                  "title": "Verify Deployment",
                  "value": "Verify that the site still works and updates have been completed (Admin access required) https://${{ env.APP_HOST_URL }}/admin/index.php"
                },{
                  "title": "Build DB: ${{ needs.db.result }}"
                },{
                  "title": "Build PHP: ${{ needs.php.result }}"
                },{
                  "title": "Build Cron: ${{ needs.cron.result }}"
                },{
                  "title": "Build Web: ${{ needs.web.result }}"
                },{
                  "title": "Build Performance App: ${{ needs.build.result }}"
                },{
                  "title": "Cleanup Resources: ${{ needs.call-cleanup-workflow.result }}"
                },{
                  "title": "Deploy to OpenShift: ${{ needs.call-deploy-workflow.result }}"
                },{
                  "title": "Lighthouse Test Results:",
                  "value": "${{ needs.lighthouse-check.outputs.LHRESULT }}"
                }]
              }]
            }
