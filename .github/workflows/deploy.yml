# Deploy On Openshift
# Builds and Deploys merged PR's to persistent pods/services/routes/etc in the OpenShift environment.
name: ðŸš€ Deploy

env:
  USER: ${{ github.actor }}

on:
  workflow_call:
    inputs:
      APP_NAME:
        required: true
        type: string
      DB_INIT_FILE_LOCATION:
        required: true
        type: string
      WEB_NAME:
        required: true
        type: string
      WEB_IMAGE:
        required: true
        type: string
      PHP_NAME:
        required: true
        type: string
      DB_IMAGE:
        required: true
        type: string
      DB_HOST:
        required: true
        type: string
      DB_USER:
        required: true
        type: string
      DB_PORT:
        required: true
        type: string
      DB_SERVICE:
        required: true
        type: string
      DB_NAME:
        required: true
        type: string
      CRON_IMAGE:
        required: true
        type: string
      CRON_NAME:
        required: true
        type: string
      REDIS_IMAGE:
        required: true
        type: string
      REDIS_NAME:
        required: true
        type: string
      REDIS_REPLICAS:
        required: true
        type: string
      APP_HOST_URL:
        required: true
        type: string
      SITE_URL:
        required: true
        type: string
      BUILD_NAMESPACE:
        required: true
        type: string
      DEPLOY_NAMESPACE:
        required: true
        type: string
      IMAGE_REPO_DOMAIN:
        required: true
        type: string
      IMAGE_REPO_URL:
        required: true
        type: string
      IMAGE_PULL_SECRET_NAME:
        required: true
        type: string
      DB_HEALTH_QUERY:
        required: true
        type: string
      DB_BACKUP_DEPLOYMENT_NAME:
        required: true
        type: string
      DB_BACKUP_DEPLOYMENT_FULL_NAME:
        required: true
        type: string
      BACKUP_HELM_CHART:
        required: true
        type: string
      BACKUP_IMAGE:
        required: true
        type: string
      CLEAN_PVC:
        required: true
        type: string
permissions:
  contents: read
  id-token: write

jobs:
  # Deploy to Openshift
  deploy:
    name: OpenShift (${{ github.ref_name }})
    environment: ${{ github.ref_name }}
    runs-on: ubuntu-latest
    if: |
      always()
      && (
        github.ref_name == 'e66ac2-prod'
      ) || (
        contains(github.event.workflow_run.conclusion, 'success')
        && !contains(github.event.workflow_run.conclusion, 'failure')
      )
    steps:
      - name: ðŸ“¤ Checkout Target Branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}

      # Log in to OpenShift.
      # Note: The secrets needed to log in are NOT available if the PR comes from a FORK.
      # PR's must originate from a branch off the original repo or else all openshift `oc` commands will fail.
      - name: ðŸ”‘ Log in to OpenShift ( ${{ github.ref_name }} )
        if: success()
        run: |
          curl -LO https://mirror.openshift.com/pub/openshift-v4/clients/oc/latest/linux/oc.tar.gz
          tar -xvf oc.tar.gz
          sudo mv oc /usr/local/bin/
          oc version
          oc login --token=${{ secrets.SA_TOKEN }} --server=${{ secrets.SA_SERVER }}

      # Deploy Secrets for DB Connection
      - name: Deploy secrets
        run: bash ./openshift/scripts/deploy-secrets.sh
        env:
            APP_NAME: ${{ inputs.APP_NAME }}
            OC_PROJECT: ${{ github.ref_name }}
            DB_NAME: ${{ inputs.DB_NAME }}
            DB_USER: ${{ secrets.DB_USER }}
            SECRET_DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
            SECRET_DOCKER_USERNAME: ${{ secrets.ARTIFACTORY_USER }}
            SECRET_DOCKER_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
            SECRET_DOCKER_EMAIL: ${{ secrets.ARTIFACTORY_EMAIL }}
            IMAGE_PULL_SECRET_NAME: ${{ inputs.IMAGE_PULL_SECRET_NAME }}
            IMAGE_REPO_DOMAIN: ${{ inputs.IMAGE_REPO_DOMAIN }}

      # Deploy Network Ingress Policy
      - name: Deploy Network Ingress Policy
        run: bash ./openshift/scripts/deploy-network-ingress.sh
        env:
            DEPLOY_NAMESPACE: ${{ inputs.DEPLOY_NAMESPACE }}

      - name: Create Environment ConfigMap
        if: success()
        run: bash ./openshift/scripts/deploy-env-configmap.sh
        env:
          OC_PROJECT: ${{ github.ref_name }}
          APP_NAME: ${{ inputs.APP_NAME }}
          APP_KEY: ${{ secrets.APP_KEY }}
          APP_URL: ${{ inputs.SITE_URL }}

      # Deploy Redis
      - name: Deploy Redis StatefulSet (${{ inputs.REDIS_NAME  }})
        if: success()
        run: bash ./openshift/scripts/deploy-redis-sentinel.sh
        env:
          REDIS_HELM_CHART: ${{ inputs.REDIS_HELM_CHART }}
          DEPLOY_NAMESPACE: ${{ inputs.DEPLOY_NAMESPACE }}
          REDIS_NAME: ${{ inputs.REDIS_NAME }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          REPLICAS: ${{ inputs.REDIS_REPLICAS }}
          OC_PROJECT: ${{ github.ref_name }}

      - name: Deploy Database StatefulSet (${{ inputs.DB_SERVICE  }})
        id: deploy_database
        if: success()
        run: bash ./openshift/scripts/deploy-database.sh
        env:
          APP_NAME: ${{ inputs.APP_NAME }}
          OC_PROJECT: ${{ github.ref_name }}
          IMAGE_REPO_URL: ${{ inputs.IMAGE_REPO_URL }}
          DB_IMAGE: ${{ inputs.DB_IMAGE }}
          DEPLOY_NAMESPACE: ${{ inputs.DEPLOY_NAMESPACE }}
          DB_SERVICE: ${{ inputs.DB_SERVICE }}
          DB_HOST: ${{ inputs.DB_HOST }}
          DB_PORT: ${{ inputs.DB_PORT }}
          DB_NAME: ${{ inputs.DB_NAME }}
          DB_BACKUP_DEPLOYMENT_NAME: ${{ inputs.DB_BACKUP_DEPLOYMENT_NAME }}
          DB_BACKUP_DEPLOYMENT_FULL_NAME: ${{ inputs.DB_BACKUP_DEPLOYMENT_FULL_NAME }}
          BACKUP_HELM_CHART: ${{ inputs.BACKUP_HELM_CHART }}
          BACKUP_IMAGE: ${{ inputs.BACKUP_IMAGE }}
          DB_HEALTH_QUERY: ${{ inputs.DB_HEALTH_QUERY }}
          CLEAN_PVC: ${{ inputs.CLEAN_PVC }}

      - name: Deploy Backups via Helm
        uses: WyriHaximus/github-action-helm3@v3
        if: success()
        with:
          exec: bash ./openshift/scripts/deploy-database-backups.sh
        env:
          APP_NAME: ${{ inputs.APP_NAME }}
          DB_INIT_FILE_LOCATION: ${{ inputs.DB_INIT_FILE_LOCATION }}
          DB_BACKUP_DEPLOYMENT_NAME: ${{ inputs.DB_BACKUP_DEPLOYMENT_NAME }}
          DB_BACKUP_DEPLOYMENT_FULL_NAME: ${{ inputs.DB_BACKUP_DEPLOYMENT_FULL_NAME }}
          BACKUP_HELM_CHART: ${{ inputs.BACKUP_HELM_CHART }}
          BACKUP_IMAGE: ${{ inputs.BACKUP_IMAGE }}
          DB_SERVICE: ${{ inputs.DB_SERVICE }}
          DB_HOST: ${{ inputs.DB_HOST }}
          DB_NAME: ${{ inputs.DB_NAME }}
          DB_PORT: ${{ inputs.DB_PORT }}
          DB_HEALTH_QUERY: ${{ inputs.DB_HEALTH_QUERY }}
          OC_PROJECT: ${{ github.ref_name }}
          CLEAN_PVC: ${{ inputs.CLEAN_PVC }}

      - name: Deploy Template and Run Upgrades
        if: success()
        run: bash ./openshift/scripts/deploy-template.sh
        env:
          APP_NAME: ${{ inputs.APP_NAME }}
          APP_HOST_URL: ${{ inputs.APP_HOST_URL }}
          SITE_URL: ${{ inputs.SITE_URL }}
          DB_SERVICE: ${{ inputs.DB_SERVICE }}
          DB_NAME: ${{ inputs.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          BUILD_NAMESPACE: ${{ inputs.BUILD_NAMESPACE }}
          DEPLOY_NAMESPACE: ${{ inputs.DEPLOY_NAMESPACE }}
          WEB_NAME: ${{ inputs.WEB_NAME }}
          WEB_IMAGE: ${{ secrets.ARTIFACTORY_URL }}/${{ inputs.WEB_IMAGE }}
          PHP_NAME: ${{ inputs.PHP_NAME }}
          CRON_NAME: ${{ inputs.CRON_NAME }}
          CRON_IMAGE: ${{ inputs.CRON_IMAGE }}
          REDIS_NAME: ${{ inputs.REDIS_NAME }}
          BACKUP_HELM_CHART: ${{ inputs.BACKUP_HELM_CHART }}
          BACKUP_IMAGE: ${{ inputs.BACKUP_IMAGE }}
          IMAGE_REPO_URL: ${{ inputs.IMAGE_REPO_URL }}
          IMAGE_REPO_DOMAIN: ${{ inputs.IMAGE_REPO_DOMAIN }}
          IMAGE_PULL_SECRET_NAME: ${{ inputs.IMAGE_PULL_SECRET_NAME }}
          SECRET_DOCKER_USERNAME: ${{ secrets.ARTIFACTORY_USER }}
          SECRET_DOCKER_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
          SECRET_DOCKER_EMAIL: ${{ secrets.ARTIFACTORY_EMAIL }}

