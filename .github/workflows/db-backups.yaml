# Static Deploy On Openshift
# Builds and Deploys merged PR's to persistent pods/services/routes/etc in the OpenShift Dev environment.
name: Deploy Backup container to Openshift
  
on:
  push:
  workflow_dispatch:

jobs:
  
  #Build the backup container

  build:
    name: Build APP
    runs-on: ubuntu-latest
    # if: ${{ github.event.pull_request.merged == true}}
    env:
      BUILD_ID: ${{ github.event.number }}
      BUILD_NAMESPACE: 332842-tools
      BRANCH: automated-db-backups 
      BUILD_TAG: latest
      APP: performance
      DB_BACKUP_APP: db-backup
    steps:
      # Checkout the PR branch
      - name: Print env
        run: |
          echo BUILD ID: $BUILD_ID
          echo BUILD NAMESPACE: $BUILD_NAMESPACE
          echo BRANCH: $BRANCH
      - name: Checkout Target Branch
        uses: actions/checkout@v1
      # Log in to OpenShift.
      # Note: The secrets needed to log in are NOT available if the PR comes from a FORK.
      # PR's must originate from a branch off the original repo or else all openshift `oc` commands will fail.
      - name: Log in to OpenShift
        run: |
          oc login --token=${{ secrets.SA_TOKEN }} --server=https://api.silver.devops.gov.bc.ca:6443
      # Build backup container
      - name: Build Backup image
        working-directory: "./openshift/app"
        run: |
          oc -n ${BUILD_NAMESPACE} process -f docker-build.yml \
          -p NAME=${DB_BACKUP_APP} \
          -p TAG=${BUILD_TAG} \
          -p BASE_IMAGE_NAME="mysql-57-centos7" \
          -p BASE_IMAGE_TAG="5.7" \
          -p BASE_IMAGE_REPO="aro.jfrog.io/moodle/" \
          -p GITHUB_AUTH_TOKEN=${{secrets.AUTH_TOKEN}} \
          -p SOURCE_REPOSITORY_URL="https://github.com/BCDevOps/backup-container.git" \
          -p SOURCE_REPOSITORY_REF="master" \
          -p SOURCE_CONTEXT_DIR="docker" | oc -n ${BUILD_NAMESPACE} apply -f - 
          oc -n ${BUILD_NAMESPACE} start-build bc/${DB_BACKUP_APP} --wait



  # Deploy App images in Dev
  deployDev:
    name: Deploy APP to Dev environment
    runs-on: ubuntu-latest
    env:
      BUILD_ID: ${{ github.event.number }}
      CRON_PASSWORD: ${{ secrets.CRON_PASSWORD }}
      NAMESPACE: 332842-dev
      BUILD_NAMESPACE: 332842-tools
      BRANCH: automated-db-backups 
      APP: performance
      APP_HOST: performance-332842-dev.apps.silver.devops.gov.bc.ca
      DB_BACKUP_APP: db-backup
      DB_NAME: performance-db
    needs:
      - build
    steps:
       # - name: Print env
       #   run: |
       #     echo BUILD ID: $BUILD_ID
       #     echo BUILD NAMESPACE: $BUILD_NAMESPACE
       #     echo BRANCH: $BRANCH
      - name: Checkout Target Branch
        uses: actions/checkout@v1

       # Log in to OpenShift.
       # Note: The secrets needed to log in are NOT available if the PR comes from a FORK.
       # PR's must originate from a branch off the original repo or else all openshift `oc` commands will fail.
      - name: Log in to OpenShift
        run: |
          oc login --token=${{ secrets.SA_TOKEN }} --server=https://api.silver.devops.gov.bc.ca:6443
      - name: Deploy Backup container
        run: |
          test -n "${NAMESPACE}"
          test -n "${BUILD_NAMESPACE}"
          test -n "${BRANCH}"
          echo "Current namespace is ${NAMESPACE}"
          #oc -n ${BUILD_NAMESPACE} policy add-role-to-group system:image-puller system:serviceaccounts:${NAMESPACE}
          oc -n ${NAMESPACE} process -f openshift/app/db-backup-deploy.yaml \
          -p NAME=${DB_BACKUP_APP} \
          -p IMAGE_STREAM_TAG=${DB_BACKUP_APP}:latest \
          -p BUILD_NAMESPACE=${BUILD_NAMESPACE} \
          -p DB_NAME=${DB_NAME}  | oc -n ${NAMESPACE} apply -f -
          sleep 30
          oc rollout latest dc/db-backup -n ${NAMESPACE}
          # Check deployment rollout status every 10 seconds (max 10 minutes) until complete.
          ATTEMPTS=0
          ROLLOUT_STATUS_CMD="oc rollout status dc/db-backup -n ${NAMESPACE}"
          until $ROLLOUT_STATUS_CMD || [ $ATTEMPTS -eq 60 ]; do
            $ROLLOUT_STATUS_CMD
            ATTEMPTS=$((attempts + 1))
            sleep 10
          done
          oc project ${NAMESPACE}     
          echo "Listing pods.."

     