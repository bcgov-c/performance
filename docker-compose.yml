services:
  build:
    tty: true
    restart: "no"
    env_file:
      - .env
      - .env.example.versions
    environment:
      http_proxy: http://198.161.14.25:8080
      https_proxy: http://198.161.14.25:8080
      COMPOSER_MEMORY_LIMIT: -1
      COMPOSER_PROCESS_TIMEOUT: 2000
    build:
      context: .
      dockerfile: Dockerfile
      args:
        DOCKER_FROM_IMAGE: ${IMAGE_REPO_URL:-}${CRON_IMAGE:-php:8.3-cli}
        PHP_INI_ENVIRONMENT: ${PHP_INI_ENVIRONMENT:-production}
    links:
      - db
    volumes:
      - ./temp/var/www:/var/www:delegated
      - ./openshift/scripts/migrate-build-files.sh:/usr/local/bin/migrate-build-files.sh:ro
      - ./openshift/scripts/test-migration-complete.sh:/usr/local/bin/test-migration-complete.sh:ro
    command: /usr/local/bin/migrate-build-files.sh
    healthcheck:
      test: ["NONE"]

  db:
    image: ${DB_IMAGE:-mariadb:10}
    env_file:
      - .env
      - .env.example.versions
    environment:
      MARIADB_ALLOW_EMPTY_ROOT_PASSWORD: no
      MARIADB_DATABASE: ${DB_NAME:-performance}
      MARIADB_USER: ${DB_USER:-performance}
      MARIADB_PASSWORD: ${DB_PASSWORD:-performance}
      MARIADB_AUTO_UPGRADE: 1
    volumes:
      - mysqldata:/var/lib/mysql:delegated
      - ./temp/db-backups:/backups:delegated
      - ./openshift/config/mariadb/resources/primary.cnf:/etc/my.cnf:ro
    ports:
      - 3307:3306
    healthcheck:
      test: ["CMD-SHELL", "healthcheck.sh --innodb_initialized --connect"]
      interval: 10s
      timeout: 5s
      retries: 5

  php:
    depends_on:
      db:
        condition: service_healthy
    tty: true
    restart: "no"
    env_file:
      - .env
      - .env.example.versions
    environment:
      SITE_URL: ${SITE_URL:-http://localhost:8080}
      REDIS_PASSWORD: ${REDIS_PASSWORD:-local-example}
      XDEBUG_MODE: debug
      XDEBUG_CONFIG: client_host=host.docker.internal client_port=9003
      PCC_ALLOW_IP: 127.0.0.1
      ADMINER_ENABLE: true
    build:
      context: .
      dockerfile: Dockerfile
      args:
        DOCKER_FROM_IMAGE: ${IMAGE_REPO_URL:-}${PHP_IMAGE:-php:8.3-fpm}
        PHP_INI_ENVIRONMENT: ${PHP_INI_ENVIRONMENT:-production}
    volumes:
      - ./temp/var/www:/var/www:delegated
      - ./openshift/scripts/migrate-build-files.sh:/usr/local/bin/migrate-build-files.sh:ro
      - ./openshift/scripts/test-migration-complete.sh:/usr/local/bin/test-migration-complete.sh:ro
    command: php-fpm
    links:
      - db
    healthcheck:
      test: ["CMD-SHELL", "php-fpm-healthcheck"]
      interval: 10s
      timeout: 10s
      retries: 20

  web:
    depends_on:
      php:
        condition: service_started
    image: ${WEB_IMAGE:-nginxinc/nginx-unprivileged:1.27.1-alpine-slim}
    ports:
      - "8080:8080"
    volumes:
      - ./openshift/config/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./temp/var/www:/var/www:ro
    links:
      - php
    command: [nginx-debug, '-g', 'daemon off;']

  cron:
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env
      - .env.example.versions
    build:
      context: .
      dockerfile: Dockerfile
      args:
        DOCKER_FROM_IMAGE: ${IMAGE_REPO_URL:-}${PHP_IMAGE:-php:8.3-cli}
        PHP_INI_ENVIRONMENT: ${PHP_INI_ENVIRONMENT:-production}
    volumes:
      - ./temp/var/www:/var/www:delegated
    command: /usr/local/bin/cron.sh

  # redis:
  #   image: ${REDIS_IMAGE:-redis:latest}
  #   healthcheck:
  #     test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - ./openshift/config/redis/dokcer-redis.conf:/usr/local/etc/redis/redis.conf:ro
  #     - ./temp/data/:/data
  #   command: [redis-server, /usr/local/etc/redis/redis.conf]

  redis-primary:
    image: redis:latest
    container_name: redis-primary
    hostname: redis-primary
    ports:
      - "6379:6379"
    volumes:
      - ./data/primary:/data
    command:
      [
        "redis-server",
        "--appendonly",
        "yes",
        "--repl-diskless-load",
        "on-empty-db",
        "--replica-announce-ip",
        "$${REDIS_HOST_IP}",
        "--replica-announce-port",
        "6379",
        "--protected-mode",
        "no"
      ]

  redis-secondary-1:
    image: redis:latest
    container_name: redis-secondary-1
    hostname: redis-secondary-1
    depends_on:
      - redis-primary
    ports:
      - "6380:6379"
    volumes:
      - ./data/secondary1:/data
    command:
      [
        "redis-server",
        "--appendonly",
        "yes",
        "--replicaof",
        "redis-primary",
        "6379",
        "--repl-diskless-load",
        "on-empty-db",
        "--replica-announce-ip",
        "$${REDIS_HOST_IP}",
        "--replica-announce-port",
        "6380",
        "--protected-mode",
        "no"
      ]

  redis-secondary-2:
    image: redis:latest
    container_name: redis-secondary-2
    hostname: redis-secondary-2
    depends_on:
      - redis-primary
    ports:
      - "6381:6379"
    volumes:
      - ./data/secondary2:/data
    command:
      [
        "redis-server",
        "--appendonly",
        "yes",
        "--replicaof",
        "redis-primary",
        "6379",
        "--repl-diskless-load",
        "on-empty-db",
        "--replica-announce-ip",
        "$${REDIS_HOST_IP}",
        "--replica-announce-port",
        "6381",
        "--protected-mode",
        "no"
      ]

  sentinel-1:
    image: redis:latest
    container_name: sentinel-1
    hostname: sentinel-1
    depends_on:
      - redis-primary
    ports:
      - "26379:26379"
    command: >
      sh -c 'echo "bind 0.0.0.0" > /etc/sentinel.conf &&
            echo "sentinel monitor mymaster $${REDIS_HOST_IP} 6379 2" >> /etc/sentinel.conf &&
            echo "sentinel resolve-hostnames yes" >> /etc/sentinel.conf &&
            echo "sentinel down-after-milliseconds mymaster 10000" >> /etc/sentinel.conf &&
            echo "sentinel failover-timeout mymaster 10000" >> /etc/sentinel.conf &&
            echo "sentinel parallel-syncs mymaster 1" >> /etc/sentinel.conf &&
            redis-sentinel /etc/sentinel.conf'

  sentinel-2:
    image: redis:latest
    container_name: sentinel-2
    hostname: sentinel-2
    depends_on:
      - redis-primary
    ports:
      - "26380:26379"
    command: >
      sh -c 'echo "bind 0.0.0.0" > /etc/sentinel.conf &&
            echo "sentinel monitor mymaster $${REDIS_HOST_IP} 6379 2" >> /etc/sentinel.conf &&
            echo "sentinel resolve-hostnames yes" >> /etc/sentinel.conf &&
            echo "sentinel down-after-milliseconds mymaster 10000" >> /etc/sentinel.conf &&
            echo "sentinel failover-timeout mymaster 10000" >> /etc/sentinel.conf &&
            echo "sentinel parallel-syncs mymaster 1" >> /etc/sentinel.conf &&
            redis-sentinel /etc/sentinel.conf'

  sentinel-3:
    image: redis:latest
    container_name: sentinel-3
    hostname: sentinel-3
    depends_on:
      - redis-primary
    ports:
      - "26381:26379"
    command: >
      sh -c 'echo "bind 0.0.0.0" > /etc/sentinel.conf &&
            echo "sentinel monitor mymaster $${REDIS_HOST_IP} 6379 2" >> /etc/sentinel.conf &&
            echo "sentinel resolve-hostnames yes" >> /etc/sentinel.conf &&
            echo "sentinel down-after-milliseconds mymaster 10000" >> /etc/sentinel.conf &&
            echo "sentinel failover-timeout mymaster 10000" >> /etc/sentinel.conf &&
            echo "sentinel parallel-syncs mymaster 1" >> /etc/sentinel.conf &&
            redis-sentinel /etc/sentinel.conf'

  redisinsight:
    image: redis/redisinsight:latest
    container_name: redisinsight
    ports:
      - "5540:5540"

volumes:
  mysqldata: {}
